{"version":3,"sources":["Ask.js","App.js","reportWebVitals.js","index.js"],"names":["Ask","source","setSource","useState","colour","setColour","hb","setHb","React","createElement","Fragment","className","style","backgroundColor","concat","backgroundImage","src","alt","height","onClick","handleYes","width","margin","handleNo","App","showText","setShowText","showAsk","setShowAsk","useEffect","timer","setTimeout","clearTimeout","for","name","placeholder","handleSubmit","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"4LA8CeA,MA1Cf,WACI,MAMOC,EAAQC,GAAaC,mBANX,oBAOVC,EAAQC,GAAaF,mBAJhB,YAKLG,EAAIC,GAASJ,oBAAS,GAU7B,OACIK,IAAAC,cAAAD,IAAAE,SAAA,KACAF,IAAAC,cAAA,OAAKE,UAAU,MAAMC,MAAO,CAACC,gBAAe,GAAAC,OAAMV,GAAUW,gBAAiB,qBACzEP,IAAAC,cAAA,WACID,IAAAC,cAAA,OAAKO,IAAKf,EAAQgB,IAAI,SACtBT,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAAA,OAAKE,UAAU,WAEPL,EAAME,IAAAC,cAAA,OAAKG,MAAO,CAACM,OAAQ,SAAUF,IAAI,0BACrCR,IAAAC,cAAAD,IAAAE,SAAA,KACAF,IAAAC,cAAA,UAAQU,QAnBdC,KACdlB,EAVQ,oBA4BwCS,UAAU,MAAMC,MAAO,CAACC,gBAAiB,aAAcQ,MAAO,MAAOC,OAAQ,cAAe,OACxHd,IAAAC,cAAA,UAAQU,QAjBfI,KACbrB,EAZQ,2BAaRG,EAXU,SAYVE,GAAM,IAcyCI,UAAU,MAAMC,MAAO,CAACC,gBAAiB,aAAcQ,MAAO,MAAOC,OAAQ,cAAe,YCoBpIE,MAlDf,WAEE,MAAOC,EAAUC,GAAevB,oBAAS,IAClCwB,EAASC,GAAczB,oBAAS,GAavC,OAXA0B,oBAAU,KACN,MAAMC,EAAQC,WAAW,KACzBL,GAAY,IACT,KAEH,MAAO,IAAMM,aAAaF,IAC3B,IAMDtB,IAAAC,cAAAD,IAAAE,SAAA,KACCiB,EAAYnB,IAAAC,cAACT,EAAG,MACjBQ,IAAAC,cAAA,OAAKE,UAAU,OACbc,EACCjB,IAAAC,cAAA,MAAIE,UAAU,WAAU,YAGxBH,IAAAC,cAAA,OAAKE,UAAU,qBACbH,IAAAC,cAAA,OAAKE,UAAU,OACbH,IAAAC,cAAA,OAAKE,UAAU,QACfH,IAAAC,cAAA,WAAKD,IAAAC,cAAA,WACHD,IAAAC,cAAA,SAAOwB,IAAI,QAAO,SACVzB,IAAAC,cAAA,SAAOyB,KAAK,OAAOC,YAAY,0BAEvC3B,IAAAC,cAAA,WACAD,IAAAC,cAAA,WACAD,IAAAC,cAAA,SAAOwB,IAAI,SAAQ,WACTzB,IAAAC,cAAA,SAAOyB,KAAK,QAAOC,YAAY,sBAEzC3B,IAAAC,cAAA,WAAKD,IAAAC,cAAA,WACLD,IAAAC,cAAA,UAAQE,UAAU,MAAMQ,QAxBdiB,KACnBR,GAAW,KAuB6C,UAC/CpB,IAAAC,cAAA,iBC/BE4B,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH3C,IAAAC,cAACD,IAAM4C,WAAU,KACf5C,IAAAC,cAACe,EAAG,QAORa,K","file":"static/js/main.b0939512.chunk.js","sourcesContent":["import './App.css';\r\nimport React, { useState } from 'react';\r\n\r\n\r\nfunction Ask() {\r\n    const question = \"/images/ask.gif\";\r\n    const yes = \"/images/yes.gif\";\r\n    const sad = \"/images/sad-sad-cat.gif\"\r\n    const red = \"#cf1735\"\r\n    const white = \"white\"\r\n\r\n    const [source, setSource] = useState(question);\r\n    const [colour, setColour] = useState(red);\r\n    const [hb, setHb] = useState(false);\r\n\r\n    const handleYes = () => {\r\n        setSource(yes)\r\n    }\r\n    const handleNo = () => {\r\n        setSource(sad)\r\n        setColour(white)\r\n        setHb(true)\r\n    }\r\n    return(\r\n        <>\r\n        <div className='App' style={{backgroundColor : `${colour}`, backgroundImage: \"/images/rain.jpg\"}}>\r\n            <div>\r\n                <img src={source} alt='nmae'></img>\r\n                <br/>\r\n                <br/>\r\n                <div className='buttons'>\r\n                    {\r\n                        hb ? (<img style={{height: '100px'}} src='images/heartbreak.jpg'></img>) : (\r\n                            <>\r\n                            <button onClick={handleYes} className='sub' style={{backgroundColor: 'whitesmoke', width: '30%', margin: '20px 20px'}} >Yes</button>                    \r\n                            <button onClick={handleNo} className='sub' style={{backgroundColor: 'whitesmoke', width: '30%', margin: '20px 20px'}} >No</button>\r\n                            </>\r\n                        )\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Ask;","import './App.css';\nimport Ask from './Ask';\nimport React from 'react';\nimport { useEffect, useState} from \"react\";\n\nfunction App() {\n\n  const [showText, setShowText] = useState(true);\n  const [showAsk, setShowAsk] = useState(false);\n\n  useEffect(() => {\n      const timer = setTimeout(() => {\n      setShowText(false);\n      }, 3000); // Adjust the timeout based on your requirements\n\n      return () => clearTimeout(timer);\n  }, []);\n\n  const handleSubmit = () => {\n    setShowAsk(true);\n  }\n  return (\n    <>\n    {showAsk ?  (<Ask />) : (\n    <div className=\"App\" >\n    { showText ? (\n       <h1 className=\"fade-in\">Hello...</h1> \n      ) :\n     (\n       <div className=\"fade-out-and-show\">\n         <div className='box'>\n           <div className='form'>\n           <br/><br/>\n             <label for=\"name\"> \n               Name: <input name='name' placeholder='Enter your full name'/>\n             </label>\n             <br/>\n             <br/>\n             <label for=\"email\"> \n               Email:  <input name='email'placeholder='Enter your email'/>\n             </label>\n             <br/><br/>\n             <button className='sub' onClick={handleSubmit}>Submit</button>\n             <br/>\n           </div>\n         </div>\n       </div>\n     )\n    }\n    </div>)\n}\n</>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}